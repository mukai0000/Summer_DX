//====================================
//	myString.h	自作文字コード？
//	武藤海人		2023/07/17
//====================================

#pragma once

#ifndef MY_STRING_H
#define MY_STRING_H

#include <string>
#include "main.h"

using namespace std;

typedef enum {
	STRING_SPACE,
	STRING_EXCLAMATION,
	STRING_DOUBLR_QUOTATION,
	STRING_SHARP,
	STRING_DOLLAR,
	STRING_PERCENT,
	STRING_AMPERSAND,
	STRING_QUOTATION,
	STRING_LEFT_PAREN,
	STRING_RIGHT_PAREN,
	STRING_ASTERISK,
	STRING_PLUS,
	STRING_COMMA,
	STRING_MUINUS,
	STRING_PERIOD,
	STRING_SLASH,
	STRING_ZERO,
	STRING_ONE,
	STRING_TWO,
	STRING_THREE,
	STRING_FOUR,
	STRING_FIVE,
	STRING_SIX,
	STRING_SEVEN,
	STRING_EIGHT,
	STRING_NINE,
	STRING_COLON,
	STRING_SEMICOLON,
	STRING_LESS_THAN,
	STRING_EQUAL,
	STRING_GREATER_THAN,
	STRING_QUESTION,

	//大文字アルファベット
	STRING_AT,
	STRING_A,
	STRING_B,
	STRING_C,
	STRING_D,
	STRING_E,
	STRING_F,
	STRING_G,
	STRING_H,
	STRING_I,
	STRING_J,
	STRING_K,
	STRING_L,
	STRING_M,
	STRING_N,
	STRING_O,
	STRING_P,
	STRING_Q,
	STRING_R,
	STRING_S,
	STRING_T,
	STRING_U,
	STRING_V,
	STRING_W,
	STRING_X,
	STRING_Y,
	STRING_Z,


	STRING_LEFT_SQUARE_BRACKET,
	STRING_VACK_SLASH,
	STRING_RIGHT_SQUARE_BRACKET,
	STRING_CARET,
	STRING_UNDER_BAR,
	STRING_BACK_QUOTES,

	//小文字アルファベット
	STRING_SMOLE_A,
	STRING_SMOLE_B,
	STRING_SMOLE_C,
	STRING_SMOLE_D,
	STRING_SMOLE_E,
	STRING_SMOLE_F,
	STRING_SMOLE_G,
	STRING_SMOLE_H,
	STRING_SMOLE_I,
	STRING_SMOLE_J,
	STRING_SMOLE_K,
	STRING_SMOLE_L,
	STRING_SMOLE_M,
	STRING_SMOLE_N,
	STRING_SMOLE_O,
	STRING_SMOLE_P,
	STRING_SMOLE_Q,
	STRING_SMOLE_R,
	STRING_SMOLE_S,
	STRING_SMOLE_T,
	STRING_SMOLE_U,
	STRING_SMOLE_V,
	STRING_SMOLE_W,
	STRING_SMOLE_X,
	STRING_SMOLE_Y,
	STRING_SMOLE_Z,


	STRING_LEFT_BRACE,
	STRING_RIGHT_BRACE,
	STRING_TILDE,

	//ひらがな
	STRING_HIRA_A,
	STRING_HIRA_I,
	STRING_HIRA_U,
	STRING_HIRA_E,
	STRING_HIRA_O,
	STRING_HIRA_KA,
	STRING_HIRA_KI,
	STRING_HIRA_KU,
	STRING_HIRA_KE,
	STRING_HIRA_KO,
	STRING_HIRA_SA,
	STRING_HIRA_SI,
	STRING_HIRA_SU,
	STRING_HIRA_SE,
	STRING_HIRA_SO,
	STRING_HIRA_TA,
	STRING_HIRA_TI,
	STRING_HIRA_TU,
	STRING_HIRA_TE,
	STRING_HIRA_TO,
	STRING_HIRA_NA,
	STRING_HIRA_NI,
	STRING_HIRA_NU,
	STRING_HIRA_NE,
	STRING_HIRA_NO,
	STRING_HIRA_HA,
	STRING_HIRA_HI,
	STRING_HIRA_HU,
	STRING_HIRA_HE,
	STRING_HIRA_HO,
	STRING_HIRA_MA,
	STRING_HIRA_MI,
	STRING_HIRA_MU,
	STRING_HIRA_ME,
	STRING_HIRA_MO,
	STRING_HIRA_YA,
	STRING_HIRA_YU,
	STRING_HIRA_YO,
	STRING_HIRA_RA,
	STRING_HIRA_RI,
	STRING_HIRA_RU,
	STRING_HIRA_RE,
	STRING_HIRA_RO,
	STRING_HIRA_WA,
	STRING_HIRA_WO,
	STRING_HIRA_NN,
	//だくてん
	STRING_HIRA_GA,
	STRING_HIRA_GI,
	STRING_HIRA_GU,
	STRING_HIRA_GE,
	STRING_HIRA_GO,
	STRING_HIRA_ZA,
	STRING_HIRA_ZI,
	STRING_HIRA_ZU,
	STRING_HIRA_ZE,
	STRING_HIRA_ZO,
	STRING_HIRA_DA,
	STRING_HIRA_DI,
	STRING_HIRA_DU,
	STRING_HIRA_DE,
	STRING_HIRA_DO,
	STRING_HIRA_BA,
	STRING_HIRA_BI,
	STRING_HIRA_BU,
	STRING_HIRA_BE,
	STRING_HIRA_BO,
	STRING_HIRA_PA,
	STRING_HIRA_PI,
	STRING_HIRA_PU,
	STRING_HIRA_PE,
	STRING_HIRA_PO,
	//小さいやゆよ
	STRING_HIRA_SMOLL_TU,
	STRING_HIRA_SMOLL_YA,
	STRING_HIRA_SMOLL_YU,
	STRING_HIRA_SMOLL_YO,


	//カタカナ
	STRING_KANA_A,
	STRING_KANA_I,
	STRING_KANA_U,
	STRING_KANA_E,
	STRING_KANA_O,
	STRING_KANA_KA,
	STRING_KANA_KI,
	STRING_KANA_KU,
	STRING_KANA_KE,
	STRING_KANA_KO,
	STRING_KANA_SA,
	STRING_KANA_SI,
	STRING_KANA_SU,
	STRING_KANA_SE,
	STRING_KANA_SO,
	STRING_KANA_TA,
	STRING_KANA_TI,
	STRING_KANA_TU,
	STRING_KANA_TE,
	STRING_KANA_TO,
	STRING_KANA_NA,
	STRING_KANA_NI,
	STRING_KANA_NU,
	STRING_KANA_NE,
	STRING_KANA_NO,
	STRING_KANA_HA,
	STRING_KANA_HI,
	STRING_KANA_HU,
	STRING_KANA_HE,
	STRING_KANA_HO,
	STRING_KANA_MA,
	STRING_KANA_MI,
	STRING_KANA_MU,
	STRING_KANA_ME,
	STRING_KANA_MO,
	STRING_KANA_YA,
	STRING_KANA_YU,
	STRING_KANA_YO,
	STRING_KANA_RA,
	STRING_KANA_RI,
	STRING_KANA_RU,
	STRING_KANA_RE,
	STRING_KANA_RO,
	STRING_KANA_WA,
	STRING_KANA_WO,
	STRING_KANA_NN,
	//だくてん
	STRING_KANA_GA,
	STRING_KANA_GI,
	STRING_KANA_GU,
	STRING_KANA_GE,
	STRING_KANA_GO,
	STRING_KANA_ZA,
	STRING_KANA_ZI,
	STRING_KANA_ZU,
	STRING_KANA_ZE,
	STRING_KANA_ZO,
	STRING_KANA_DA,
	STRING_KANA_DI,
	STRING_KANA_DU,
	STRING_KANA_DE,
	STRING_KANA_DO,
	STRING_KANA_BA,
	STRING_KANA_BI,
	STRING_KANA_BU,
	STRING_KANA_BE,
	STRING_KANA_BO,
	STRING_KANA_PA,
	STRING_KANA_PI,
	STRING_KANA_PU,
	STRING_KANA_PE,
	STRING_KANA_PO,
	//小文字のツヤユヨ
	STRING_KANA_SMOLL_TU,
	STRING_KANA_SMOLL_YA,
	STRING_KANA_SMOLL_YU,
	STRING_KANA_SMOLL_YO,

	//日本語記号
	STRING_JAP_TOUTEN,
	STRING_JAP_KUTEN,
	STRING_JAP_NOBASI,
	STRING_JAP_KARA
}MY_STRIUNG;


typedef enum {
	FONT_1,
	FONT_2
}STRING_FONT;


class MyString
{
public:
	MyString(string text);
	~MyString();

	void DrawString(D3DXVECTOR2 pos, D3DXVECTOR2 size, D3DXCOLOR col);

	int GetStringSize() { return m_Size; }

private:

	void GetStringLength(string text);			//受け取った文字列を専用の文字列に変換するときにその文字列の大きさを指定するための関数

	void ChangeCode(string text);				//Stringを専用の文字コードに変換

	uint8_t GetMultiKigo_129(uint8_t index);		//受け取った文字コードを専用の文字コードに変換する関数　記号
	uint8_t GetJAPHira_130(uint8_t index);			//上のひらがな版	それに合わせて全角数字
	uint8_t GetJAPKata_131(uint8_t index);			//上のカタカナ版
	uint8_t GetENG_Single(uint8_t index);			//上の英語版？全角の英語版を作ろうと思ったけど、特殊な入力を行わないと全角にならないから必要ないかも


	uint8_t* m_Text = nullptr;					//表示するテキスト 文字数に応じて大きさを変える

	int m_Size;									//文字烈の大きさ

public:
	//文字参照に使う文字列
	static string m_Hira;
	static string m_Kata;
	static string m_Kigo;
};



#endif // !MY_STRING
